/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var dnannsumkbn2 = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
    t.ok( true, __filename );
    t.strictEqual( typeof dnannsumkbn2, 'function', 'main export is a function' );
    t.end();
});

tape( 'attached to the main export is a method providing an ndarray interface', function test( t ) {
    t.strictEqual( typeof dnannsumkbn2.ndarray, 'function', 'method is a function' );
    t.end();
});

tape( 'returns 0 when stride is 0', function test( t ) {
    var x = new Float64Array([1, 2, 3]);
    var out = new Float64Array(1);
    var result = dnannsumkbn2(x.length, x, 0, out, 1);

    t.strictEqual(result[0], 0, 'returns 0 when stride is 0');
    t.end();
});

tape( 'ignores NaN as the first element', function test( t ) {
    var x = new Float64Array([NaN, 1, 2, 3]);
    var out = new Float64Array(1);
    var result = dnannsumkbn2(x.length, x, 1, out, 1);

    t.strictEqual(result[0], 6, 'ignores NaN as the first element');
    t.end();
});

tape( 'handles an empty array', function test( t ) {
    var x = new Float64Array([]);
    var out = new Float64Array(1);
    var result = dnannsumkbn2(0, x, 1, out, 1);

    t.strictEqual(result[0], 0, 'returns 0 for empty array');
    t.end();
});

tape( 'handles arrays with only NaN values', function test( t ) {
    var x = new Float64Array([NaN, NaN, NaN]);
    var out = new Float64Array(1);
    var result = dnannsumkbn2(x.length, x, 1, out, 1);

    t.strictEqual(result[0], 0, 'returns 0 for array with only NaN values');
    t.end();
});

tape( 'handles a single element array', function test( t ) {
    var x = new Float64Array([4]);
    var out = new Float64Array(1);
    var result = dnannsumkbn2(1, x, 1, out, 1);

    t.strictEqual(result[0], 4, 'returns the single element when no NaN');
    t.end();
});
