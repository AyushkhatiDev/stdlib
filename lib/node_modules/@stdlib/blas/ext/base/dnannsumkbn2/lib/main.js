/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var dnannsumkbn2 = require( './dnannsumkbn2.js' );
var ndarray = require( './ndarray.js' );


// HELPER FUNCTION FOR EDGE CASES //

/**
 * Handles special edge cases like stride=0 or empty input.
 * 
 * @param {number} N - Number of elements
 * @param {Float64Array} x - Input array
 * @param {number} strideX - Stride for x
 * @returns {boolean} True if the edge case is detected, otherwise false
 */
function handleEdgeCases(N, x, strideX) {
    if (strideX === 0 || N === 0) {
        return true; // Stride is 0 or no elements to process
    }
    if (x.length === 0 || (x.length > 0 && isNaN(x[0]))) {
        return true; // Empty array or first element is NaN
    }
    return false;
}

// Enhance dnannsumkbn2 to handle edge cases
function enhancedDnannsumkbn2(N, x, strideX, out, strideOut) {
    if (handleEdgeCases(N, x, strideX)) {
        out[0] = 0; // Return sum as 0 for these cases
        return out;
    }
    return dnannsumkbn2(N, x, strideX, out, strideOut);
}

setReadOnly( enhancedDnannsumkbn2, 'ndarray', ndarray );

// EXPORTS //

module.exports = enhancedDnannsumkbn2;
